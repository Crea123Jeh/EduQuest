// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A flow for generating dynamic, tailored questions based on student learning history.
 *
 * - generateDynamicQuests - A function that generates dynamic questions.
 * - GenerateDynamicQuestsInput - The input type for the generateDynamicQuests function.
 * - GenerateDynamicQuestsOutput - The return type for the generateDynamicQuests function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateDynamicQuestsInputSchema = z.object({
  studentLearningHistory: z
    .string()
    .describe(
      'The learning history of the student, integrated from Google Classroom, including topics studied, grades, and areas of weakness.'
    ),
  topic: z.string().describe('The topic for which questions need to be generated.'),
  difficultyLevel: z
    .enum(['easy', 'medium', 'hard'])
    .describe('The difficulty level of the questions.'),
  numberOfQuestions: z.number().describe('The number of questions to generate.'),
});

export type GenerateDynamicQuestsInput = z.infer<
  typeof GenerateDynamicQuestsInputSchema
>;

const GenerateDynamicQuestsOutputSchema = z.object({
  questions: z
    .array(z.string())
    .describe('An array of dynamically generated questions.'),
});

export type GenerateDynamicQuestsOutput = z.infer<
  typeof GenerateDynamicQuestsOutputSchema
>;

export async function generateDynamicQuests(
  input: GenerateDynamicQuestsInput
): Promise<GenerateDynamicQuestsOutput> {
  return generateDynamicQuestsFlow(input);
}

const generateDynamicQuestsPrompt = ai.definePrompt({
  name: 'generateDynamicQuestsPrompt',
  input: {schema: GenerateDynamicQuestsInputSchema},
  output: {schema: GenerateDynamicQuestsOutputSchema},
  prompt: `You are an AI-powered educational tool that generates dynamic questions tailored to student learning history.

  Based on the student's learning history: {{{studentLearningHistory}}}, generate {{{numberOfQuestions}}} questions on the topic of {{{topic}}} with a difficulty level of {{{difficultyLevel}}}.

  Ensure the questions are relevant, engaging, and address the student's specific needs and weaknesses.

  The questions should be returned as an array of strings.

  Example:
  [
  "Question 1",
  "Question 2",
  "Question 3"
  ]
  `,
});

const generateDynamicQuestsFlow = ai.defineFlow(
  {
    name: 'generateDynamicQuestsFlow',
    inputSchema: GenerateDynamicQuestsInputSchema,
    outputSchema: GenerateDynamicQuestsOutputSchema,
  },
  async input => {
    const {output} = await generateDynamicQuestsPrompt(input);
    return output!;
  }
);
